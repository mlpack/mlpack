on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
  release:
    types: [published, created, edited]
permissions:
  contents: read
name: mlpack.mlpack

jobs:
  build_and_test_matrix:
    strategy:
      fail-fast: false # Run all configurations even if one fails.
      matrix:
        # The R bindings are tested via r-bindings.yaml.
        config: [
          {
            name: 'Debug',
            cmakeVars: '-DCMAKE_BUILD_TYPE=Debug -DUSE_PRECOMPILED_HEADERS=OFF -DBUILD_CLI_EXECUTABLES=OFF'
          },
          {
            name: 'CLI',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=ON'
          },
          {
            name: 'Python',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_PYTHON_BINDINGS=ON -DPYTHON_EXECUTABLE=/usr/bin/python3'
          },
          {
            name: 'Julia',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_JULIA_BINDINGS=ON -DJULIA_EXECUTABLE=/opt/julia-1.10.4/bin/julia'
          },
          {
            name: 'Go',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_GO_BINDINGS=ON'
          },
          {
            name: 'Markdown',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_MARKDOWN_BINDINGS=ON'
          }
        ]

    name: 'Linux build: ${{ matrix.config.name }}'
    if: ${{ github.repository == 'mlpack/mlpack' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Set up ccache.
      - name: Get ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}
          variant: ccache

      # Set up the build environment.
      - name: Set up Python
        if: ${{ matrix.config.name == 'Python' }}
        run: |
            python -m pip install --upgrade pip
            python -m pip install --upgrade --ignore-installed setuptools cython pandas wheel pytest

      - name: Set up Julia
        if: ${{ matrix.config.name == 'Julia' }}
        run: |
            wget https://julialang-s3.julialang.org/bin/linux/x64/1.10/julia-1.10.4-linux-x86_64.tar.gz
            sudo tar -C /opt/ -xvpf julia-1.10.4-linux-x86_64.tar.gz

      # Install build dependencies.
      - name: Install build dependencies
        run: |
          git clone --depth 1 https://github.com/mlpack/jenkins-conf.git conf
          sudo apt-get update
          sudo apt-get install --yes --allow-unauthenticated \
              libopenblas-dev libstb-dev libcereal-dev xz-utils
          # Install the oldest Armadillo version that we support.
          curl -k -L https://sourceforge.net/projects/arma/files/armadillo-10.8.2.tar.xz | tar -xvJ && \
              cd armadillo* && \
              cmake . && \
              make && \
              sudo make install && \
              cd ..
          # Install the latest ensmallen version.
          wget https://ensmallen.org/files/ensmallen-latest.tar.gz
              tar -xvzpf ensmallen-latest.tar.gz # Unpack into ensmallen-*/.
              cd ensmallen-*/ && \
              sudo cp -vr include/* /usr/include/ && \
              cd ..

      - name: Clear ccache and show config
        run: |
          # Show the ccache config settings, and zero the statistics counter
          ccache --show-config
          ccache --zero-stats

      - name: Configure mlpack with CMake
        run: |
          mkdir build && cd build
          cmake ${{ matrix.config.cmakeVars }} -DBUILD_TESTS=ON ../

      - name: Build mlpack
        run: cd build && make -j4

      # Run the tests manually so that we can get JUnit output.
      - name: Run mlpack_test
        run: |
          cd build
          OMP_NUM_THREADS=4 bin/mlpack_test -r junit | tee mlpack_test.junit.xml
          # Filter 'debug' output because it makes the junit too large.
          grep -v '\[DEBUG\]' mlpack_test.junit.xml > mlpack_test.junit.filtered.xml
          mv mlpack_test.junit.filtered.xml mlpack_test.junit.xml
          # Remove version numbers and other non-xml from the output.
          sed -i '/<?xml/,$!d' mlpack_test.junit.xml

      # Run binding tests for each binding type.
      - name: Run Python binding tests
        if: ${{ matrix.config.name == 'Python' }}
        run: |
          # Run manually instead of through CTest so we can get XML output.
          ROOTDIR=`pwd`;
          cd build/src/mlpack/bindings/python/
          python3 -m pytest tests/ --junit-xml="$ROOTDIR/build/python_bindings.junit.xml"

      - name: Run Go binding tests
        if: ${{ matrix.config.name == 'Go' }}
        run: |
          # Run manually instead of through CTest so we can get XML output (via
          # an extra tool).
          go install github.com/jstemmer/go-junit-report/v2@latest
          ROOTDIR=`pwd`;
          cd build/src/mlpack/bindings/go/src/mlpack.org/v1/mlpack/
          go test -v $ROOTDIR/src/mlpack/bindings/go/tests/go_binding_test.go 2>&1 |\
              $HOME/go/bin/go-junit-report -set-exit-code > $ROOTDIR/build/go_bindings.junit.xml;

      - name: Run Julia binding tests
        if: ${{ matrix.config.name == 'Julia' }}
        run: |
          # Run manually instead of through CTest so we can get XML output.
          # We use the TestReports.jl package for getting output in the right
          # format.
          ROOTDIR=`pwd`;
          cd build/src/mlpack/bindings/julia/mlpack/
          JULIA_PROJECT=$PWD /opt/julia-1.10.4/bin/julia -e \
              "using Pkg; Pkg.add(\"TestReports\"); using TestReports; TestReports.test(\"mlpack\")"
          mv testlog.xml $ROOTDIR/build/julia_bindings.junit.xml

      - name: Publish test reports
        id: test_reports
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()
        with:
          report_paths: "build/*.junit.xml"
          fail_on_failure: true
          annotate_only: true # No need to create "Checks" for tests.
