on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main
  release:
    types: [published, created, edited]
permissions:
  contents: read
name: mlpack.mlpack

jobs:
  build_and_test_matrix:
    strategy:
      fail-fast: false # Run all configurations even if one fails.
      matrix:
        # The R bindings are tested via r-bindings.yaml.
        config: [
          {
            name: 'Debug',
            cmakeVars: '-DCMAKE_BUILD_TYPE=Debug -DBUILD_CLI_EXECUTABLES=OFF'
          },
          {
            name: 'CLI',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=ON'
          },
          {
            name: 'Python',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_PYTHON_BINDINGS=ON -DPYTHON_EXECUTABLE=/usr/bin/python3'
          },
          {
            name: 'Julia',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_JULIA_BINDINGS=ON -DJULIA_EXECUTABLE=/opt/julia-1.10.4/bin/julia'
          },
          {
            name: 'R',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_R_BINDINGS=ON -DCEREAL_INCLUDE_DIR=../cereal-1.3.2/include/'
          },
          {
            name: 'Go',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_GO_BINDINGS=ON'
          },
          {
            name: 'Markdown',
            cmakeVars: '-DBUILD_CLI_EXECUTABLES=OFF -DBUILD_MARKDOWN_BINDINGS=ON'
          }
        ],
        os: [
          {
            runner: ubuntu-latest,
            name: 'Linux'
          },
          {
            runner: macOS-latest,
            name: 'macOS'
          }
        ]

    name: 'Linux build: ${{ matrix.config.name }}'
    if: ${{ github.repository == 'mlpack/mlpack' }}
    runs-on: ${{ matrix.os.runner }}

    steps:
      - uses: actions/checkout@v3

      # Set up ccache.
      - name: Get ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}
          variant: ccache
          max-size: 5G

      # Set up the build environment for any bindings, if needed.
      - name: Set up binding dependencies
        uses: ./.github/actions/binding_setup
        with:
          lang: ${{ matrix.config.name }}

      # Install build dependencies.
      - name: Install build dependencies (Linux)
        if: matrix.os.name == 'Linux'
        run: |
          git clone --depth 1 https://github.com/mlpack/jenkins-conf.git conf
          sudo apt-get update
          sudo apt-get install --yes --allow-unauthenticated \
              libopenblas-dev libstb-dev libcereal-dev xz-utils
          # Install the oldest Armadillo version that we support.
          curl -k -L https://sourceforge.net/projects/arma/files/armadillo-10.8.2.tar.xz | tar -xvJ && \
              cd armadillo* && \
              cmake . && \
              make && \
              sudo make install && \
              cd ..
          # Install the latest ensmallen version.
          wget https://ensmallen.org/files/ensmallen-latest.tar.gz
              tar -xvzpf ensmallen-latest.tar.gz # Unpack into ensmallen-*/.
              cd ensmallen-*/ && \
              sudo cp -vr include/* /usr/include/ && \
              cd ..

      - name: Install build dependencies (macOS)
        if: matrix.os.name == 'macOS'
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          brew install libomp openblas armadillo cereal ensmallen ccache

      # Because mlpack's precompiled headers basically include everything
      # (mlpack.hpp, core.hpp, etc.), changes to a single file will invalidate
      # the ccache entry---so it is better to leave it turned off, so that
      # ccache entries will be at a more granular level and are more likely to
      # be reused across runs.
      - name: Configure mlpack with CMake
        run: |
          mkdir build && cd build
          cmake ${{ matrix.config.cmakeVars }} -DUSE_PRECOMPILED_HEADERS=OFF -DBUILD_TESTS=ON ../

      - name: Build mlpack
        run: cd build && make -j4

      # Run the tests manually so that we can get JUnit output.
      - name: Run mlpack_test
        run: |
          cd build
          # Filter 'debug' output from the junit file because it makes the junit
          # too large, but still print it to stderr of this job step.
          OMP_NUM_THREADS=4 bin/mlpack_test -r junit | tee /dev/stderr | grep -v '\[DEBUG\]' > mlpack_test.junit.xml
          # Remove version numbers and other non-xml from the output.
          sed -i '/<?xml/,$!d' mlpack_test.junit.xml

      # Run binding tests for each binding type.
      - name: Run binding tests
        uses: ./.github/actions/binding_run_tests
        with:
          lang: ${{ matrix.config.name }}

      - name: Parse test output
        uses: rcurtin/test-summary-action@dist
        if: success() || failure()
        with:
          paths: "build/*.junit.xml"
          show: "fail, skip"
          fail_job: true
          print_output: true
