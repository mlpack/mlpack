# This action sets up any language-specific environment for any of mlpack's
# bindings.
name: "Run binding tests"
description: "Run tests for mlpack's bindings to other languages and gather results in junit format."
inputs:
  lang:
    required: true
    description: "The language to run binding tests for."

runs:
  using: "composite"
  steps:
    #
    # Python bindings.
    #
    - name: "Run Python binding tests"
      if: inputs.lang == 'Python'
      shell: bash
      run: |
          # Run manually instead of through CTest so we can get XML output.
          ROOTDIR=`pwd`;
          cd build/src/mlpack/bindings/python/
          python3 -m pytest tests/ --junit-xml="$ROOTDIR/build/python_bindings.junit.xml"

    #
    # Julia bindings.
    #
    - name: "Run Julia binding tests"
      if: inputs.lang == 'Julia'
      shell: bash
      run: |
          # Run manually instead of through CTest so we can get XML output.
          # We use the TestReports.jl package for getting output in the right
          # format.
          ROOTDIR=`pwd`;
          cd build/src/mlpack/bindings/julia/mlpack/
          JULIA_PROJECT=$PWD $JULIA_EXECUTABLE -e \
              "using Pkg; Pkg.add(\"TestReports\"); using TestReports; TestReports.test(\"mlpack\")"
          mv testlog.xml $ROOTDIR/build/julia_bindings.junit.xml

    #
    # R bindings.
    #
    - name: "Run R binding tests"
      if: inputs.lang == 'R'
      shell: bash
      run: |
          cd build/src/mlpack/bindings/R/mlpack/
          Rscript -e "library(pkgload); load_all('.'); library(testthat); options(testthat.junit.output_file='r_bindings.junit.xml'); test_dir('tests/')"
          mv r_bindings.junit.xml $ROOTDIR/build/r_bindings.junit.xml

    - name: "Upload R package artifact"
      if: inputs.lang == 'R'
      uses: actions/upload-artifact@v4.4.0
      with:
        name: mlpack_r_tarball
        path: build/src/mlpack/bindings/R/mlpack_*.tar.gz

    - name: "Install R CMD check dependencies"
      if: inputs.lang == 'R'
      shell: Rscript {0}
      run: |
          install.packages('remotes')
          remotes::install_deps('mlpack_4.5.2.tar.gz', dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("curl")

    - name: "Run R CMD check"
      if: inputs.lang == 'R'
      shell: bash
      # TODO: revert to error_on = 'warning'
      run: Rscript -e "rcmdcheck::rcmdcheck(' ', args = c('--no-manual', '--as-cran'), error_on = 'error', check_dir = 'check')"

    # TODO: upload check results on failure

    #
    # Go bindings.
    #
    - name: "Run Go binding tests"
      if: inputs.lang == 'Go'
      shell: bash
      run: |
          # Run manually instead of through CTest so we can get XML output (via
          # an extra tool).
          go install github.com/jstemmer/go-junit-report/v2@latest
          ROOTDIR=`pwd`;
          cd build/src/mlpack/bindings/go/src/mlpack.org/v1/mlpack/
          go test -v $ROOTDIR/src/mlpack/bindings/go/tests/go_binding_test.go 2>&1 |\
              $HOME/go/bin/go-junit-report -set-exit-code > $ROOTDIR/build/go_bindings.junit.xml;
