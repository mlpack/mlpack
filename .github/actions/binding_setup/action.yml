# This action sets up any language-specific environment for any of mlpack's
# bindings.
name: "Set up binding environments"
description: "Install build and runtime dependencies for mlpack's bindings to other languages."
inputs:
  lang:
    required: true
    description: "The language to set up bindings for."

runs:
  using: "composite"
  steps:
    #
    # Python bindings.
    #
    - name: "Set up Python"
      if: inputs.lang == 'Python'
      shell: bash
      run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade --ignore-installed setuptools cython \
              pandas wheel pytest

    #
    # Julia bindings.
    #
    - name: "Set up Julia on Linux"
      if: inputs.lang == 'Julia' && runner.os == 'Linux'
      shell: bash
      run: |
          wget https://julialang-s3.julialang.org/bin/linux/x64/1.10/julia-1.10.4-linux-x86_64.tar.gz
          sudo tar -C /opt/ -xvpf julia-1.10.4-linux-x86_64.tar.gz
          echo "CMAKE_BINDING_ARGS=/opt/julia-1.10.4/bin/julia" >> $GITHUB_ENV

    - name: "Set up Julia on macOS"
      if: inputs.lang == 'Julia' && runner.os == 'macOS'
      shell: bash
      run: brew install --cask julia

    #
    # R bindings.
    #
    - uses: r-lib/actions/setup-pandoc@v2
      if: inputs.lang == 'R'

    - uses: r-lib/actions/setup-r@v2
      if: inputs.lang == 'R'

    - name: "Configure ccache for R"
      if: inputs.lang == 'R'
      shell: bash
      run: |
          ccache --set-config "sloppiness=include_file_ctime"
          ccache --set-config "hash_dir=false"
          ccache --zero-stats

    # This appears to be needed to work around this issue:
    # https://github.com/gagolews/stringi/issues/486
    - name: "Manually install stringi"
      if: inputs.lang == 'R'
      shell: bash
      run: Rscript -e "remove.packages('stringi'); options(configure.args='--disable-pkg-config'); install.packages('stringi')"

    - name: "Query R dependencies"
      if: inputs.lang == 'R'
      shell: bash
      run: |
          cp src/mlpack/bindings/R/mlpack/DESCRIPTION.in DESCRIPTION
          Rscript -e "install.packages('remotes')" -e "saveRDS(remotes::dev_package_deps(dependencies = TRUE), 'depends.Rds')"

    - name: Cache R packages
      if: inputs.lang == 'R' && runner.os != 'Windows' && runner.os != 'macOS'
      uses: actions/cache@v4
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-r-release-${{ hashFiles('depends.Rds') }}
        restore-keys: ${{ runner.os }}-r-release-

    - name: Install cereal manually for R
      if: inputs.lang == 'R'
      shell: bash
      run: |
          # We don't install cereal via apt, because the Debian packagers
          # split the rapidjson dependency into a separate package.  We will
          # bundle the cereal sources with the R package, so we want them to
          # be exactly the upstream sources (with rapidjson included).
          wget https://github.com/USCiLab/cereal/archive/refs/tags/v1.3.2.tar.gz
          tar -xvzpf v1.3.2.tar.gz
          #
          # These directives cause warnings on CRAN:
          # https://github.com/USCiLab/cereal/blob/master/include/cereal/external/base64.hpp#L28-L31
          # The command below comments them out.
          sed -i 's|#pragma|// #pragma|' cereal-1.3.2/include/cereal/external/base64.hpp
          #
          # Fix cereal compilation on clang 19+; see
          # https://github.com/USCiLab/cereal/pull/835
          sed -i 's|::template apply|::apply|' cereal-1.3.2/include/cereal/types/tuple.hpp

    - name: Install R-bindings dependencies
      if: inputs.lang == 'R'
      shell: Rscript {0}
      run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("roxygen2")
          remotes::install_cran("pkgbuild")

    #
    # Go bindings.
    #
    - name: "Set up Go on macOS"
      if: inputs.lang == 'Go' && runner.os == 'macOS'
      shell: bash
      run: brew install go
