module params

export GetParameters
export DeleteParameters
export Timers
export DeleteTimers
export SetParam
export SetParamMat
export SetParamUMat
export SetParamRow
export SetParamCol
export SetParamURow
export SetParamUCol
export GetParamBool
export GetParamInt
export GetParamDouble
export GetParamString
export GetParamVectorStr
export GetParamVectorInt
export GetParamMat
export GetParamUMat
export GetParamCol
export GetParamRow
export GetParamUCol
export GetParamURow
export GetParamMatWithInfo
export EnableVerbose
export DisableVerbose
export SetPassed

const library = joinpath(@__DIR__, "libmlpack_julia_util${CMAKE_SHARED_LIBRARY_SUFFIX}")

# Utility function to convert 1d object to 2d.
function convert_to_2d(in::Array{T, 1})::Array{T, 2} where T
  reshape(in, length(in), 1)
end

# Utility function to convert 2d object to 1d.  Fails if the size of one
# dimension is not 1.
function convert_to_1d(in::Array{T, 2})::Array{T, 1} where T
  if size(in, 1) != 1 && size(in, 2) != 1
    throw(ArgumentError("given matrix must be 1-dimensional; but its size is " *
        "$(size(in))"))
  end

  vec(in)
end

# Utility function to convert to and return a matrix.
function to_matrix(input, T::Type, transpose::Bool)
  result = if isa(input, Array{T, 1})
    convert_to_2d(input)
  else
    convert(Array{T, 2}, input)
  end

  return transpose ? convert(Array{T, 2}, result') : result
end

# Utility function to convert to and return a vector.
function to_vector(input, T::Type)
  if isa(input, Array{T, 1})
    input
  else
    convert_to_1d(convert(Array{T, 2}, input))
  end
end

function GetParameters(bindingName::String)
  ccall((:GetParameters, library), Ptr{Nothing}, (Cstring,), bindingName)
end

function DeleteParameters(params::Ptr{Nothing})
  ccall((:DeleteParameters, library), Nothing, (Ptr{Nothing},), params)
end

function Timers()
  ccall((:Timers, library), Ptr{Nothing}, ())
end

function DeleteTimers(timers)
  ccall((:DeleteTimers, library), Nothing, (Ptr{Nothing},), timers)
end

function SetParam(params::Ptr{Nothing}, paramName::String, paramValue::Int)
  ccall((:SetParamInt, library), Nothing, (Ptr{Nothing}, Cstring, Cint), params,
      paramName, Cint(paramValue))
end

function SetParam(params::Ptr{Nothing}, paramName::String, paramValue::Float64)
  ccall((:SetParamDouble, library), Nothing, (Ptr{Nothing}, Cstring, Float64),
      params, paramName, paramValue)
end

function SetParam(params::Ptr{Nothing}, paramName::String, paramValue::Bool)
  ccall((:SetParamBool, library), Nothing, (Ptr{Nothing}, Cstring, Bool),
      params, paramName, paramValue)
end

function SetParam(params::Ptr{Nothing}, paramName::String, paramValue::String)
  ccall((:SetParamString, library), Nothing, (Ptr{Nothing}, Cstring, Cstring),
      params, paramName, paramValue)
end

function SetParamMat(params::Ptr{Nothing},
                     paramName::String,
                     paramValue,
                     pointsAsRows::Bool,
                     transpose::Bool,
                     juliaOwnedMemory::Set{Ptr{Nothing}})
  push!(juliaOwnedMemory, convert(Ptr{Nothing}, Base.pointer(paramValue)))
  paramMat = to_matrix(paramValue, Float64, transpose)
  ccall((:SetParamMat, library), Nothing, (Ptr{Nothing}, Cstring, Ptr{Float64},
      Csize_t, Csize_t, Bool), params, paramName, Base.pointer(paramMat),
      size(paramMat, 1), size(paramMat, 2), pointsAsRows)
end

function SetParamUMat(params::Ptr{Nothing},
                      paramName::String,
                      paramValue,
                      pointsAsRows::Bool,
                      transpose::Bool,
                      juliaOwnedMemory::Set{Ptr{Nothing}})
  push!(juliaOwnedMemory, convert(Ptr{Nothing}, Base.pointer(paramValue)))
  paramMat = to_matrix(paramValue, Int, transpose)

  # Sanity check.
  if minimum(paramMat) <= 0
    throw(DomainError("Input $(paramName) cannot have 0 or negative values!  " *
        "Must be 1 or greater."))
  end

  # Conversion (and subtracting 1 from the labels) happens in :SetParamUMat.
  ccall((:SetParamUMat, library), Nothing, (Ptr{Nothing}, Cstring,
      Ptr{Clonglong}, Csize_t, Csize_t, Bool), params, paramName,
      Base.pointer(paramMat), size(paramValue, 1), size(paramValue, 2),
      pointsAsRows)
end

function SetParam(params::Ptr{Nothing},
                  paramName::String,
                  vector::Vector{String})
  # For this we have to set the size of the vector then each string
  # sequentially.  I am not sure if this is fully necessary but I have some
  # reservations about Julia's support for passing arrays of strings correctly
  # as a const char**.
  ccall((:SetParamVectorStrLen, library), Nothing, (Ptr{Nothing}, Cstring,
      Csize_t), params, paramName, size(vector, 1))
  for i in 1:size(vector, 1)
    ccall((:SetParamVectorStrStr, library), Nothing, (Ptr{Nothing}, Cstring,
        Cstring, Csize_t), params, paramName, vector[i], i .- 1)
  end
end

function SetParam(params::Ptr{Nothing},
                  paramName::String,
                  vector::Vector{Int})
  cintVec = convert(Vector{Clonglong}, vector)
  ccall((:SetParamVectorInt, library), Nothing, (Ptr{Nothing}, Cstring,
      Ptr{Clonglong}, Csize_t), params, paramName, Base.pointer(cintVec),
      size(cintVec, 1))
end

function SetParam(params::Ptr{Nothing},
                  paramName::String,
                  matWithInfo::Tuple{Array{Bool, 1}, Array{Float64, 2}},
                  pointsAsRows::Bool,
                  juliaOwnedMemory::Set{Ptr{Nothing}})
  push!(juliaOwnedMemory, convert(Ptr{Nothing}, Base.pointer(matWithInfo[2])))
  ccall((:SetParamMatWithInfo, library), Nothing, (Ptr{Nothing}, Cstring,
      Ptr{Bool}, Ptr{Float64}, Int, Int, Bool), params, paramName,
      Base.pointer(matWithInfo[1]), Base.pointer(matWithInfo[2]),
      size(matWithInfo[2], 1), size(matWithInfo[2], 2), pointsAsRows)
end

function SetParamRow(params::Ptr{Nothing},
                     paramName::String,
                     paramValue,
                     juliaOwnedMemory::Set{Ptr{Nothing}})
  push!(juliaOwnedMemory, convert(Ptr{Nothing}, Base.pointer(paramValue)))
  paramVec = to_vector(paramValue, Float64)
  ccall((:SetParamRow, library), Nothing, (Ptr{Nothing}, Cstring, Ptr{Float64},
      Csize_t), params, paramName, Base.pointer(paramVec), size(paramVec, 1))
end

function SetParamCol(params::Ptr{Nothing},
                     paramName::String,
                     paramValue,
                     juliaOwnedMemory::Set{Ptr{Nothing}})
  push!(juliaOwnedMemory, convert(Ptr{Nothing}, Base.pointer(paramValue)))
  paramVec = to_vector(paramValue, Float64)
  ccall((:SetParamCol, library), Nothing, (Ptr{Nothing}, Cstring, Ptr{Float64},
      Csize_t), params, paramName, Base.pointer(paramVec), size(paramVec, 1))
end

function SetParamURow(params::Ptr{Nothing},
                      paramName::String,
                      paramValue,
                      juliaOwnedMemory::Set{Ptr{Nothing}})
  push!(juliaOwnedMemory, convert(Ptr{Nothing}, Base.pointer(paramValue)))
  paramVec = to_vector(paramValue, Int)

  # Sanity check.
  if minimum(paramVec) <= 0
    throw(DomainError("Input $(paramName) cannot have 0 or negative values!  " *
        "Must be 1 or greater."))
  end

  # Conversion (and subtracting 1 from the labels) happens in :SetParamURow.
  ccall((:SetParamURow, library), Nothing, (Ptr{Nothing}, Cstring,
      Ptr{Clonglong}, Csize_t), params, paramName, Base.pointer(paramVec),
      size(paramValue, 1))
end

function SetParamUCol(params::Ptr{Nothing},
                      paramName::String,
                      paramValue,
                      juliaOwnedMemory::Set{Ptr{Nothing}})
  push!(juliaOwnedMemory, convert(Ptr{Nothing}, Base.pointer(paramValue)))
  paramVec = to_vector(paramValue, Int)

  # Sanity check.
  if minimum(paramVec) <= 0
    throw(DomainError("Input $(paramName) cannot have 0 or negative values!  " *
        "Must be 1 or greater."))
  end

  # Conversion (and subtracting 1 from the labels) happens in :SetParamUCol.
  ccall((:SetParamUCol, library), Nothing, (Ptr{Nothing}, Cstring,
      Ptr{Clonglong}, Csize_t), params, paramName, Base.pointer(paramVec),
      size(paramValue, 1))
end

function GetParamBool(params::Ptr{Nothing}, paramName::String)
  return ccall((:GetParamBool, library), Bool, (Ptr{Nothing}, Cstring,), params,
      paramName)
end

function GetParamInt(params::Ptr{Nothing}, paramName::String)
  return Int(ccall((:GetParamInt, library), Cint, (Ptr{Nothing}, Cstring,),
      params, paramName))
end

function GetParamDouble(params::Ptr{Nothing}, paramName::String)
  return ccall((:GetParamDouble, library), Float64, (Ptr{Nothing}, Cstring,),
      params, paramName)
end

function GetParamString(params::Ptr{Nothing}, paramName::String)
  return ccall((:GetParamString, library), Cstring, (Ptr{Nothing}, Cstring,),
      params, paramName)
end

function GetParamVectorStr(params::Ptr{Nothing}, paramName::String)
  local size::Csize_t
  local ptr::Ptr{String}

  # Get the size of the vector, then each element.
  size = ccall((:GetParamVectorStrLen, library), Csize_t, (Ptr{Nothing},
      Cstring,), params, paramName)
  out = Array{String, 1}()
  if size == 0
    return out
  end

  for i = 1:size
    s = ccall((:GetParamVectorStrStr, library), Cstring, (Ptr{Nothing}, Cstring,
        Csize_t), params, paramName, i .- 1)
    push!(out, Base.unsafe_string(s))
  end

  return out
end

function GetParamVectorInt(params::Ptr{Nothing}, paramName::String)
  local size::Csize_t
  local ptr::Ptr{Clonglong}

  # Get the size of the vector, then the pointer to it.  We will own the
  # pointer.
  size = ccall((:GetParamVectorIntLen, library), Csize_t, (Ptr{Nothing},
      Cstring,), params, paramName)
  # Shortcut: if the vector is empty, no need to allocate.
  if size == 0
    return Int[]
  end

  ptr = ccall((:GetParamVectorIntPtr, library), Ptr{Clonglong}, (Ptr{Nothing},
      Cstring,), params, paramName)

  return convert(Array{Int, 1}, Base.unsafe_wrap(Array{Clonglong, 1}, ptr,
      (size), own=true))
end

function GetParamMat(params::Ptr{Nothing},
                     paramName::String,
                     pointsAsRows::Bool,
                     juliaOwnedMemory::Set{Ptr{Nothing}})
  # Can we return different return types?  For now let's restrict to a matrix to
  # make it easy...
  local ptr::Ptr{Float64}
  local rows::Csize_t, cols::Csize_t
  # I suppose it would be possible to do this all in one call, but this seems
  # easy enough.
  rows = ccall((:GetParamMatRows, library), Csize_t, (Ptr{Nothing}, Cstring,),
      params, paramName)
  cols = ccall((:GetParamMatCols, library), Csize_t, (Ptr{Nothing}, Cstring,),
      params, paramName)
  # Shortcut: if the matrix is empty, return an empty matrix.
  if rows == 0 && cols == 0
    return Array{Float64, 2}(undef, 0, 0)
  end

  ptr = ccall((:GetParamMat, library), Ptr{Float64}, (Ptr{Nothing}, Cstring,),
      params, paramName)

  # Determine whether we should tell Julia to free this memory.  If the memory
  # originally came from Julia, then we won't own the wrapped object.
  own = !(convert(Ptr{Nothing}, ptr) in juliaOwnedMemory)

  if pointsAsRows
    # In this case we have to transpose, unfortunately.
    m = Base.unsafe_wrap(Array{Float64, 2}, ptr, (rows, cols), own=own)
    return m'
  else
    # Here no transpose is necessary.
    return Base.unsafe_wrap(Array{Float64, 2}, ptr, (rows, cols), own=own)
  end
end

function GetParamUMat(params::Ptr{Nothing},
                      paramName::String,
                      pointsAsRows::Bool,
                      juliaOwnedMemory::Set{Ptr{Nothing}})
  # Can we return different return types?  For now let's restrict to a matrix to
  # make it easy...
  local ptr::Ptr{Csize_t}
  local rows::Csize_t, cols::Csize_t
  # I suppose it would be possible to do this all in one call, but this seems
  # easy enough.
  rows = ccall((:GetParamUMatRows, library), Csize_t, (Ptr{Nothing}, Cstring,),
      params, paramName)
  cols = ccall((:GetParamUMatCols, library), Csize_t, (Ptr{Nothing}, Cstring,),
      params, paramName)
  # Shortcut: if the matrix is empty, return an empty matrix.
  if rows == 0 && cols == 0
    return Array{Int, 2}(undef, 0, 0)
  end

  ptr = ccall((:GetParamUMat, library), Ptr{Csize_t}, (Ptr{Nothing}, Cstring,),
      params, paramName)

  # Determine whether we should tell Julia to free this memory.  If the memory
  # originally came from Julia, then we won't own the wrapped object.
  own = !(convert(Ptr{Nothing}, ptr) in juliaOwnedMemory)

  if pointsAsRows
    # In this case we have to transpose, unfortunately.
    m = Base.unsafe_wrap(Array{Csize_t, 2}, ptr, (rows, cols), own=own)
    return convert(Array{Int, 2}, m' .+ 1)  # Add 1 because these are indexes.
  else
    # Here no transpose is necessary.
    m = Base.unsafe_wrap(Array{Csize_t, 2}, ptr, (rows, cols), own=own)
    return convert(Array{Int, 2}, m .+ 1)
  end
end

function GetParamCol(params::Ptr{Nothing},
                     paramName::String,
                     juliaOwnedMemory::Set{Ptr{Nothing}})
  local ptr::Ptr{Float64}
  local rows::Csize_t

  rows = ccall((:GetParamColRows, library), Csize_t, (Ptr{Nothing}, Cstring,),
      params, paramName)
  # Shortcut: if the vector is empty, return an empty matrix.
  if rows == 0
    return Array{Float64, 1}()
  end

  ptr = ccall((:GetParamCol, library), Ptr{Float64}, (Ptr{Nothing}, Cstring,),
      params, paramName)

  # Determine whether we should tell Julia to free this memory.  If the memory
  # originally came from Julia, then we won't own the wrapped object.
  own = !(convert(Ptr{Nothing}, ptr) in juliaOwnedMemory)

  return Base.unsafe_wrap(Array{Float64, 1}, ptr, rows, own=own)
end

function GetParamRow(params::Ptr{Nothing},
                     paramName::String,
                     juliaOwnedMemory::Set{Ptr{Nothing}})
  local ptr::Ptr{Float64}
  local cols::Csize_t

  cols = ccall((:GetParamRowCols, library), Csize_t, (Ptr{Nothing}, Cstring,),
      params, paramName)
  # Shortcut: if the vector is empty, return an empty matrix.
  if cols == 0
    return Array{Float64, 1}(undef, 0)
  end

  ptr = ccall((:GetParamRow, library), Ptr{Float64}, (Ptr{Nothing}, Cstring,),
      params, paramName)

  # Determine whether we should tell Julia to free this memory.  If the memory
  # originally came from Julia, then we won't own the wrapped object.
  own = !(convert(Ptr{Nothing}, ptr) in juliaOwnedMemory)

  return Base.unsafe_wrap(Array{Float64, 1}, ptr, cols, own=own)
end

function GetParamUCol(params::Ptr{Nothing},
                      paramName::String,
                      juliaOwnedMemory::Set{Ptr{Nothing}})
  local ptr::Ptr{Csize_t}
  local rows::Csize_t

  rows = ccall((:GetParamUColRows, library), Csize_t, (Ptr{Nothing}, Cstring,),
      params, paramName)
  # Shortcut: if the vector is empty, return an empty matrix.
  if rows == 0
    return Array{Int, 1}()
  end

  ptr = ccall((:GetParamUCol, library), Ptr{Csize_t}, (Ptr{Nothing}, Cstring,),
      params, paramName)

  # Determine whether we should tell Julia to free this memory.  If the memory
  # originally came from Julia, then we won't own the wrapped object.
  own = !(convert(Ptr{Nothing}, ptr) in juliaOwnedMemory)

  m = Base.unsafe_wrap(Array{Csize_t, 1}, ptr, rows, own=own)
  return convert(Array{Int, 1}, m .+ 1)
end

function GetParamURow(params::Ptr{Nothing},
                      paramName::String,
                      juliaOwnedMemory::Set{Ptr{Nothing}})
  local ptr::Ptr{Csize_t}
  local cols::Csize_t

  cols = ccall((:GetParamURowCols, library), Csize_t, (Ptr{Nothing}, Cstring,),
      params, paramName)
  # Shortcut: if the vector is empty, return an empty matrix.
  if cols == 0
    return Array{Int, 1}(undef, 0)
  end

  ptr = ccall((:GetParamURow, library), Ptr{Csize_t}, (Ptr{Nothing}, Cstring,),
      params, paramName)

  # Determine whether we should tell Julia to free this memory.  If the memory
  # originally came from Julia, then we won't own the wrapped object.
  own = !(convert(Ptr{Nothing}, ptr) in juliaOwnedMemory)

  m = Base.unsafe_wrap(Array{Csize_t, 1}, ptr, cols, own=own)
  return convert(Array{Int, 1}, m .+ 1)
end

function GetParamMatWithInfo(params::Ptr{Nothing},
                             paramName::String,
                             pointsAsRows::Bool,
                             juliaOwnedMemory::Set{Ptr{Nothing}})
  local ptrBool::Ptr{Bool}
  local ptrData::Ptr{Float64}
  local rows::Csize_t
  local cols::Csize_t

  rows = ccall((:GetParamMatWithInfoRows, library), Csize_t, (Ptr{Nothing},
      Cstring,), params, paramName)
  cols = ccall((:GetParamMatWithInfoCols, library), Csize_t, (Ptr{Nothing},
      Cstring,), params, paramName)
  # Shortcut: if the vector is empty, return an empty matrix.
  if rows == 0 && cols == 0
    return (Array{Bool, 1}(undef, 0), Array{Float64, 2}(undef, 0, 0))
  end

  ptrBool = ccall((:GetParamMatWithInfoBoolPtr, library), Ptr{Bool},
      (Ptr{Nothing}, Cstring,), params, paramName)
  ptrMem = ccall((:GetParamMatWithInfoPtr, library), Ptr{Float64},
      (Ptr{Nothing}, Cstring,), params, paramName)

  # Determine whether we should tell Julia to free this memory.  If the memory
  # originally came from Julia, then we won't own the wrapped object.
  own = !(convert(Ptr{Nothing}, ptrMem) in juliaOwnedMemory)

  types = Base.unsafe_wrap(Array{Bool, 1}, ptrBool, (rows), own=true)
  if pointsAsRows
    # In this case we have to transpose, unfortunately.
    m = Base.unsafe_wrap(Array{Float64, 2}, ptr, (rows, cols), own=own)
    return (types, m')
  else
    # Here no transpose is necessary.
    return (types, Base.unsafe_wrap(Array{Float64, 2}, ptr, (rows, cols),
        own=own))
  end
end

function EnableVerbose()
  ccall((:EnableVerbose, library), Nothing, ())
end

function DisableVerbose()
  ccall((:DisableVerbose, library), Nothing, ())
end

function SetPassed(params::Ptr{Nothing}, paramName::String)
  ccall((:SetPassed, library), Nothing, (Ptr{Nothing}, Cstring,), params,
      paramName)
end

end # module params
