steps:
# Checkout repository
- checkout: self
  clean: true
  fetchDepth: 1

# Set python version
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  condition: ne(variables['python.version'], '')

# Install build dependencies.
- script: |
    # Workaround to avoid a build failure, because we run out of memory.
    free -h
    df -h
    sudo dd if=/dev/zero of=/usr/swapfile.img bs=1024 count=12M
    sudo mkswap /usr/swapfile.img
    sudo swapon /usr/swapfile.img
    free -h
    df -h

    git clone --depth 1 https://github.com/mlpack/jenkins-conf.git conf

    sudo apt-get install -y --allow-unauthenticated libopenblas-dev g++ xz-utils

    if [ "$BINDING" = "python" ]; then
      python -m pip install --upgrade pip
      python -m pip install --upgrade --ignore-installed setuptools cython pandas wheel
    fi

    if [ "$BINDING" = "julia" ]; then
      wget https://julialang-s3.julialang.org/bin/linux/x64/1.10/julia-1.10.4-linux-x86_64.tar.gz
      sudo tar -C /opt/ -xvpf julia-1.10.4-linux-x86_64.tar.gz
    fi

    # Install armadillo.
    curl -k -L https://sourceforge.net/projects/arma/files/armadillo-10.8.2.tar.xz | tar -xvJ && \
        cd armadillo* && \
        cmake . && \
        make && \
        sudo make install && \
        cd ..

    # Install ensmallen.
    wget https://ensmallen.org/files/ensmallen-latest.tar.gz
        tar -xvzpf ensmallen-latest.tar.gz # Unpack into ensmallen-*/.
        cd ensmallen-*/ && \
        sudo cp -vr include/* /usr/include/ && \
        cd ..

    # Install STB.
    wget https://mlpack.org/files/stb.tar.gz
        tar -xvzpf stb.tar.gz # Unpack into stb/.
        cd stb &&\
        sudo cp -vr include/* /usr/include/ && \
        cd ..

    # Install cereal.
    wget https://github.com/USCiLab/cereal/archive/v1.3.0.tar.gz
        tar -xvzpf v1.3.0.tar.gz # Unpack into cereal-1.3.0/.
        cd cereal-1.3.0 && \
        sudo cp -vr include/cereal /usr/include/ && \
        cd ..

  displayName: 'Install Build Dependencies'

# Configure mlpack (CMake)
- script: |
    mkdir build && cd build
    if [ "$BINDING" = "go" ]; then
      export GOPATH=$PWD/src/mlpack/bindings/go
      export GO111MODULE=off
      go get -u -t gonum.org/v1/gonum/...
    fi
    cmake $CMAKEARGS -DPYTHON_EXECUTABLE=`which python` -DCEREAL_INCLUDE_DIR=/usr/include/ ..
  displayName: 'CMake'

# Build mlpack
- script: cd build && make -j2
  displayName: 'Build'

# Run tests via ctest.
- script: cd build && CTEST_OUTPUT_ON_FAILURE=1 ctest -T Test .
  displayName: 'Run tests via ctest'

# Publish test results to Azure Pipelines
- task: PublishTestResults@2
  inputs:
    testResultsFormat: cTest
    testResultsFiles: build/Testing/*/Test.xml
    failTaskOnFailedTests: true
  displayName: 'Publish tests'

# Publish build artifacts to Azure Pipelines
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'build/Testing/'
    artifactName: 'Tests'
  displayName: 'Publish artifacts test results'
