steps:
- checkout: self
  clean: true
  fetchDepth: 1
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '5.3.0'

# Fetch build dependencies
- powershell: |
    nuget install OpenBLAS -o $(Agent.ToolsDirectory)
    nuget install ensmallen -o $(Agent.ToolsDirectory) -Version 2.17.0
    ## Delete all ensmallen dependencies including armadillo headers, we do not need them here
    Remove-Item $(Agent.ToolsDirectory)\ensmallen.2.17.0\installed\x64-linux\share -Force -Recurse
    Remove-Item $(Agent.ToolsDirectory)\ensmallen.2.17.0\installed\x64-linux\include\armadillo_bits -Force -Recurse
    Remove-Item $(Agent.ToolsDirectory)\ensmallen.2.17.0\installed\x64-linux\include\armadillo -Force

  displayName: 'Fetch build dependencies'

# Get cereal
- bash: |
    curl -L https://github.com/USCiLab/cereal/archive/refs/tags/v1.3.2.tar.gz -o cereal-1.3.2.tar.gz
    tar -xvzf cereal-1.3.2.tar.gz
  displayName: 'Download cereal'

# Configure armadillo
- bash: |
    git clone --depth 1 https://github.com/mlpack/jenkins-conf.git conf

    curl -O -L https://sourceforge.net/projects/arma/files/armadillo-10.8.2.tar.xz -o armadillo-10.8.2.tar.xz
    tar -xvf armadillo-10.8.2.tar.xz

    cd armadillo-10.8.2/ && cmake $(CMakeGenerator) \
    -DBLAS_LIBRARY:FILEPATH=$(Agent.ToolsDirectory)/OpenBLAS.0.2.14.1/lib/native/lib/x64/libopenblas.dll.a \
    -DLAPACK_LIBRARY:FILEPATH=$(Agent.ToolsDirectory)/OpenBLAS.0.2.14.1/lib/native/lib/x64/libopenblas.dll.a \
    -DCMAKE_PREFIX:FILEPATH=../../armadillo \
    -DBUILD_SHARED_LIBS=OFF \
    -DCMAKE_BUILD_TYPE=Release .
  displayName: 'Configure armadillo'

# Build armadillo
- task: MSBuild@1
  inputs:
    solution: 'armadillo-10.8.2/*.sln'
    msbuildLocationMethod: 'location'
    msbuildVersion: $(MSBuildVersion)
    configuration: 'Release'
    msbuildArchitecture: 'x64'
    msbuildArguments: /m /p:BuildInParallel=true
    clean: false
    maximumCpuCount: false
  displayName: 'Build armadillo'

# Configure mlpack
- powershell: |
    mkdir build
    cd build

    cmake $(CMakeGenerator) `
    $(CMakeArgs) `
    -DBLAS_LIBRARIES:FILEPATH=$(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\lib\x64\libopenblas.dll.a `
    -DLAPACK_LIBRARIES:FILEPATH=$(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\lib\x64\libopenblas.dll.a `
    -DARMADILLO_INCLUDE_DIR="..\armadillo-10.8.2\tmp\include" `
    -DARMADILLO_LIBRARY="..\armadillo-10.8.2\Release\armadillo.lib" `
    -DCEREAL_INCLUDE_DIR="..\cereal-1.3.2\include" `
    -DENSMALLEN_INCLUDE_DIR=$(Agent.ToolsDirectory)\ensmallen.2.17.0\installed\x64-linux\include `
    -DBUILD_JULIA_BINDINGS=OFF `
    -DCMAKE_BUILD_TYPE=Release ..
  displayName: 'Configure mlpack'

# Build mlpack
- task: MSBuild@1
  inputs:
    solution: 'build/*.sln'
    msbuildLocationMethod: 'location'
    msbuildVersion: $(MSBuildVersion)
    configuration: 'Release'
    msbuildArchitecture: 'x64'
    maximumCpuCount: false
    clean: false
  displayName: 'Build mlpack'

# Configure mlpack
- powershell: |
    # The .dlls are stored in the bin/ directory, and those are the ones we need
    # to run with.
    cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\bin\x64\*.* build\Release\
    cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\bin\x64\*.* build\
  displayName: 'Configure mlpack'

# Run tests via ctest.
- bash: |
    cd build
    cmake --build . --target mlpack_test --config Release
    CTEST_OUTPUT_ON_FAILURE=1 ctest -T Test -C Release . -j1
  displayName: 'Run tests via ctest'

# Copy artifacts
- powershell: |
    mkdir exe-archive
    cp build\Release\*.exe exe-archive\
  displayName: 'Copy artifacts'

# Build artifacts archive
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'exe-archive\'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: $(ArchiveNoLibs)
    replaceExistingArchive: true
  displayName: 'Build artifacts'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'build\Release\'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: $(ArchiveLibs)
    replaceExistingArchive: true
  displayName: 'Build artifacts'

# Build MSI installer.
- powershell: |
    # Pull the documentation for the installer.
    try {
      $url = "http://ci.mlpack.org/job/mlpack%20-%20doxygen%20build/lastSuccessfulBuild/artifact/build/doc/html/*zip*/html.zip"
      (new-object net.webclient).DownloadFile($url, 'dist\win-installer\jenkinsdoc.zip')
    }
    catch {
      Write-Output "Unable to download precompiled Doxygen documentation from Jenkins!"
    }
    try {
      (Add-Type -AssemblyName System.IO.Compression.FileSystem);
      [System.IO.Compression.ZipFile]::ExtractToDirectory('dist\win-installer\jenkinsdoc.zip', 'dist\win-installer\mlpack-win-installer\Sources\doc')
    }
    catch{Write-Output "Unable to add doc to installer, skipping!"}
    # Preparing installer staging.
    mkdir dist\win-installer\mlpack-win-installer\Sources\lib
    cp build\Release\*.lib dist\win-installer\mlpack-win-installer\Sources\lib\
    cp build\Release\*.exp dist\win-installer\mlpack-win-installer\Sources\lib\
    cp build\Release\*.dll dist\win-installer\mlpack-win-installer\Sources\
    cp build\Release\*.exe dist\win-installer\mlpack-win-installer\Sources\
    cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\bin\x64\*.dll dist\win-installer\mlpack-win-installer\Sources\
    cp src\mlpack\*.hpp dist\win-installer\mlpack-win-installer\Sources\
    cp src\mlpack\core dist\win-installer\mlpack-win-installer\Sources\ -recurse
    cp src\mlpack\methods dist\win-installer\mlpack-win-installer\Sources\ -recurse
    cp doc\examples dist\win-installer\mlpack-win-installer\Sources\ -recurse
    cp src\mlpack\tests\data\german.csv dist\win-installer\mlpack-win-installer\Sources\examples\sample-ml-app\sample-ml-app\data\
    # Check current git version or mlpack version.
    $ver = (Get-Content "src\mlpack\core\util\version.hpp" | where {$_ -like "*MLPACK_VERSION*"});
    $env:MLPACK_VERSION += $ver[0].substring($ver[0].length - 1, 1) + '.';
    $env:MLPACK_VERSION += $ver[1].substring($ver[1].length - 1, 1) + '.';
    $env:MLPACK_VERSION += $ver[2].substring($ver[2].length - 1, 1);

    if (Test-Path "src/mlpack/core/util/gitversion.hpp")
    {
      $ver = (Get-Content "src/mlpack/core/util/gitversion.hpp");
      $env:INSTALL_VERSION = $ver.Split('"')[1].Split(' ')[1];
    }
    else
    {
      $env:INSTALL_VERSION = $env:MLPACK_VERSION;
    }

    # Build the MSI installer.
    cd dist\win-installer\mlpack-win-installer
    & 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe' `
        -t:rebuild `
        -p:Configuration=Release `
        -p:TreatWarningsAsErrors=True `
        mlpack-win-installer.wixproj
  displayName: 'Build MSI Windows installer'

# Publish artifacts to Azure Pipelines
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(ArchiveNoLibs)
    artifactName: $(ArchiveNoLibs)
  displayName: 'Publish artifacts no-libs'
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: $(ArchiveLibs)
    artifactName: $(ArchiveLibs)
  displayName: 'Publish artifacts complete'
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'build/Testing/'
    artifactName: 'Tests'
  displayName: 'Publish artifacts test results'
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'dist\win-installer\mlpack-win-installer\bin\Release\mlpack-windows.msi'
    artifactName: mlpack-windows-installer
  displayName: 'Publish Windows MSI installer'

# Publish test results to Azure Pipelines
- task: PublishTestResults@2
  inputs:
    testResultsFormat: cTest
    testResultsFiles: build/Testing/*/Test.xml
    failTaskOnFailedTests: true
  displayName: 'Publish tests'
