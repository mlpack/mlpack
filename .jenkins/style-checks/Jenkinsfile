// The style checker build will check the style of all the code in the
// repository.
pipeline
{
  // Run inside of the custom Docker image for style checking.
  agent
  {
    docker
    {
      image 'mlpack/jenkins-mlpack-style-checks:latest'
      alwaysPull true
    }
  }

  options
  {
    // Only allow one build at a time of this job.
    disableConcurrentBuilds(abortPrevious: true)

    // We will do checkout manually.
    skipDefaultCheckout()
  }

  stages
  {
    // Clean the workspace and check out the code.
    stage('Set up workspace')
    {
      steps
      {
        cleanWs(deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true)
        checkout scm

        script
        {
          // Set the initial status.
          u = load '.jenkins/utils.groovy'
          u.startCheck(name: 'Style checks',
                       status: 'Setting up workspace...')
        }

        sh '''
          git clone https://github.com/mlpack/jenkins-conf
        '''
      }
    }

    // Now we can run those scripts.
    stage('Check code style')
    {
      steps
      {
        publishChecks(name: 'Style checks',
                      status: 'IN_PROGRESS',
                      title: 'Checking code style...',
                      text: 'Checking code style...',
                      detailsURL: currentBuild.absoluteUrl + 'console')

        sh '''
          mkdir -p reports
          ./jenkins-conf/linter/lint.sh \
              --root . \
              --reports reports/cpplint.junit.xml \
              --dir ./src/mlpack

          # Print the results.
          cat reports/cpplint.junit.xml
        '''
      }
    }
  }

  post
  {
    // Mark unstable builds as failed.
    unstable
    {
      publishChecks(name: 'Style checks',
                    status: 'COMPLETED',
                    conclusion: 'FAILURE',
                    title: 'Style checks failed.',
                    text: 'Style checks failed.',
                    detailsURL: currentBuild.absoluteUrl + 'testReport/')
    }

    failure
    {
      publishChecks(name: 'Style checks',
                    status: 'COMPLETED',
                    conclusion: 'FAILURE',
                    title: 'Style checks failed.',
                    text: 'Style checks failed.',
                    detailsURL: currentBuild.absoluteUrl + 'testReport/')
    }

    success
    {
      publishChecks(name: 'Style checks',
                    status: 'COMPLETED',
                    conclusion: 'SUCCESS',
                    title: 'Style checks passed.',
                    text: 'Style checks passed.',
                    detailsURL: currentBuild.absoluteUrl + 'testReport/')

    }

    always
    {
      // Process the test results.
      junit(allowEmptyResults: true,
            testResults: '**/reports/cpplint.junit.xml')

      // Clean the workspace after the build too.
      cleanWs(deleteDirs: true,
              disableDeferredWipeout: true,
              notFailBuild: true)
    }
  }
}
