// The style checker build will check the style of all the code in the
// repository.
pipeline
{
  // Run inside of the custom Docker image for style checking.
  agent
  {
    docker
    {
      image 'mlpack/jenkins-mlpack-style-checks:latest'
      alwaysPull true
    }
  }

  options
  {
    // Only allow one build at a time of this job.
    disableConcurrentBuilds(abortPrevious: true)
  }

  stages
  {
    // First we have to check out the jenkins-conf repository, which contains
    // the scripts that we will use for checking the style.
    stage('Check out jenkins-conf repository')
    {
      steps
      {
        script
        {
          u = load '.jenkins/utils.groovy'
          u.startBuild('Style Checks')
        }

        sh '''
          git clone https://github.com/mlpack/jenkins-conf
        '''
      }
    }

    // Now we can run those scripts.
    stage('Check code style')
    {
      steps
      {
        sh '''
          mkdir -p reports
          ./jenkins-conf/linter/lint.sh \
              --root . \
              --reports reports/cpplint.junit.xml \
              --dir ./src/mlpack

          # Print the results.
          cat reports/cpplint.junit.xml
        '''
      }
    }
  }

  post
  {
    // Mark unstable builds as failed.
    unstable
    {
      script
      {
        error "Style check failure."
      }
    }

    always
    {
      // Process the test results.
      junit(allowEmptyResults: true,
            testResults: '**/reports/cpplint.junit.xml')

      // Clean the workspace.
      cleanWs(cleanWhenNotBuilt: false,
              deleteDirs: true,
              disableDeferredWipeout: true,
              notFailBuild: true)

      script
      {
        u.setBuildStatus(result: currentBuild.currentResult,
                         context: "Style Checks",
                         successMessage: "No style issues.",
                         unstableMessage: "Style issues found.",
                         failureMessage: "Style issues found.");
      }
    }
  }
}
