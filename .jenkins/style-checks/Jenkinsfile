void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/mlpack/mlpack"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

// The style checker build will check the style of all the code in the
// repository.
pipeline
{
  // Run inside of the custom Docker image for style checking.
  agent
  {
    docker { image 'mlpack/jenkins-mlpack-style-checks:latest' }
  }

  stages
  {
    stage('Mark job as pending')
    {
      steps
      {
        setBuildStatus("Building...", "PENDING");
      }
    }

    // First we have to check out the jenkins-conf repository, which contains
    // the scripts that we will use for checking the style.
    stage('Check out jenkins-conf repository')
    {
      steps
      {
        sh '''
          git clone https://github.com/mlpack/jenkins-conf
        '''
      }
    }

    // Now we can run those scripts.
    stage('Check code style')
    {
      steps
      {
        sh '''
          mkdir -p reports
          ./jenkins-conf/linter/lint.sh \
              --root . \
              --reports reports/cpplint.junit.xml \
              --dir ./src/mlpack

          # Print the results.
          cat reports/cpplint.junit.xml
        '''
      }
    }
  }

  post
  {
    always
    {
      junit '**/reports/cpplint.junit.xml'
    }

    success
    {
      setBuildStatus("Build succeeded", "SUCCESS");
    }

    failure
    {
      setBuildStatus("Build failed", "FAILURE");
    }
  }
}
