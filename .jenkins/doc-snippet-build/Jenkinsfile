utils = load '../utils/utils.groovy'

// The documentation snippet build will extract all C++ code snippets from the
// Markdown documentation in doc/ and ensure that it compiles and runs without
// error.
pipeline
{
  // Run inside of the custom Docker image for documentation builds.
  agent
  {
    docker
    {
      image 'mlpack/jenkins-mlpack-docbuild:latest'
      alwaysPull true
    }
  }

  stages
  {
    // First we have to check out the jenkins-conf repository, which contains
    // the scripts that we will use for checking the style.
    stage('Extract and build documentation snippets')
    {
      steps
      {
        utils.setBuildStatus("Documentation Snippet Build (pipeline)",
                             "Building...",
                             "PENDING");

        sh'''
          export CCACHE_DIR=cache/ccache/;
          export CXX="ccache g++";
          export CXXFLAGS="-I./src/ -I/usr/include/eigen3/";
          export LDFLAGS="-fopenmp";
          export OMP_NUM_THREADS=1;

          ccache --zero-stats;
          ./scripts/test-docs.sh doc/;
          # Print ccache statistics.
          ccache -s
        '''
      }
    }
  }

  post
  {
    success
    {
      utils.setBuildStatus("Documentation Snippet Build (pipeline)",
                           "Build finished.",
                           "SUCCESS");
    }

    failure
    {
      utils.setBuildStatus("Documentation Snippet Build (pipeline)",
                           "Snippet build or run failure.",
                           "FAILURE");
    }
  }
}
