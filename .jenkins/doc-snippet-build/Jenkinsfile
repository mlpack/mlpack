// The documentation snippet build will extract all C++ code snippets from the
// Markdown documentation in doc/ and ensure that it compiles and runs without
// error.
pipeline
{
  // Run inside of the custom Docker image for documentation builds.
  agent
  {
    docker
    {
      image 'mlpack/jenkins-mlpack-docbuild:latest'
      alwaysPull true
    }
  }

  stages
  {
    stage('Extract and build documentation snippets')
    {
      steps
      {
        script
        {
          u = load '.jenkins/utils.groovy'
          u.setBuildStatus("Documentation Snippet Build (pipeline)",
              "Building...", "PENDING");
        }

        sh'''
          export CCACHE_DIR=cache/ccache/;
          export CXX="ccache g++";
          export CXXFLAGS="-I./src/ -I/usr/include/eigen3/";
          export LDFLAGS="-fopenmp";
          export OMP_NUM_THREADS=1;

          ccache -p;
          pwd;
          ls ../;
          ccache --zero-stats;
          ./scripts/test-docs.sh doc/;
          # Print ccache statistics.
          ccache -s
        '''
      }
    }
  }

  post
  {
    always
    {
      // Clean the workspace, but preserve ccache.
      cleanWs(cleanWhenNotBuilt: true,
              deleteDirs: true,
              disableDeferredWipeout: true,
              notFailBuild: true,
              patterns: [[pattern: 'cache/ccache/', type: 'EXCLUDE']])
    }

    success
    {
      script
      {
        u.setBuildStatus("Documentation Snippet Build (pipeline)",
            "Build finished.", "SUCCESS");
      }
    }

    failure
    {
      script
      {
        u.setBuildStatus("Documentation Snippet Build (pipeline)",
            "Snippet build or run failure.", "FAILURE");
      }
    }
  }
}
